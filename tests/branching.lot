; Copyright (C) 2010, 2011 by Vincent Povirk
; 
; Permission is hereby granted, free of charge, to any person obtaining a copy
; of this software and associated documentation files (the "Software"), to deal
; in the Software without restriction, including without limitation the rights
; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
; copies of the Software, and to permit persons to whom the Software is
; furnished to do so, subject to the following conditions:
; 
; The above copyright notice and this permission notice shall be included in
; all copies or substantial portions of the Software.
; 
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
; THE SOFTWARE.

(if (+ 1) 1 (abort))

(if (+ 0) (abort) 1)

; if has no effect without an elsepart
(if (abort) (abort))

(define (assert x) (or (get x) (abort)))

(define (expect x y) (assert (= (get x) (get y))))

(define (expect-ne x y) (if (= (get x) (get y)) (abort) ()))

(expect 1 1)

(expect-ne 1 0)

(expect 0 0)

(expect a a)

(expect () ())

(expect (quot a b c) (quot a b c))

(expect (or 3 (assert 0)) 3)

(expect 0 (or () 0))

(expect () (or 0 ()))

(expect () (or))

(expect 5 (or 5))

(expect 5 (or 5 2))

(and 0 (abort))

(expect () (and))

(expect 1 (and 1))

(expect () (and () 5))

(expect 0 (and 0 5))

(expect 5 (and 1 5))

(expect 0 (not 5))

(expect 0 (not a))

(expect 0 (not (quot 0 0)))

(expect 1 (not 0))

(expect 1 (not ()))

(expect 1 (not (+ 0 0)))

(expect () (not))

(expect 2 (begin
  (setglobal 2 4)
  (+ 1 1)))

(expect (getglobal 2) 4)

(expect (getglobal x) ())

(delglobal 2)

(expect (getglobal 2) ())

(expect 3 (begin (+ 1 2)))

(expect () (begin))

(expect () (begin . x))

(expect () (eval))

(expect (quot quot x) (eval (quot quot quot x)))

(expect (quot 1 2 3) (list (+ 1) (+ 1 1) (+ 1 1 1)))

(expect 3 (apply and (quot (+ 1) (+ 1 1) (+ 1 1 1))))

(display "display test" "this part should not be printed")

(expect 18 (* 3 3 2))

(expect 1 (*))

(expect 1 (* x))

(expect 3 (* 3))

(expect -0x0.0001 (bitwise-not 0))

(expect 0x0.1999 0.1)

(expect 0x0.e666 0.9)

(expect 0x0.8 0.5)

(expect -0x0.199a -0.1)

(expect -0x0.e667 -0.9)

(expect -0x0.8 -0.5)

(display "-0this-should-be-displayed-in-quotes")

(display "-this-shouldn't")

(display -0x80000000) ;should display as negative

(expect -0x0.0001 (bitwise-and))

(expect 5.5 (bitwise-and 5.5))

(expect 1.25 (bitwise-and 5.25 3.75))

(expect 0 (bitwise-or))

(expect 5.5 (bitwise-or 5.5))

(expect 7.75 (bitwise-or 5.25 3.75))

(expect 0 (bitwise-xor))

(expect 5.5 (bitwise-xor 5.5))

(expect 6.5 (bitwise-xor 5.25 3.75))

(expect 1 (trunc 1))

(expect 1 (trunc 1.5))

(expect -2 (trunc -1.5))

(expect -1 (- 5 6))

(expect 0.5 (- -2.5 -3))

(expect -1 (- 1))

(expect -6 (- 3 4 5))

(expect () (-))

(expect () (/))

(expect 0x0.5555 (/ 1 3))

(expect -0x0.5556 (/ -1 3))

(expect -0x0.5556 (/ 1 -3))

(expect 0x0.5555 (/ -1 -3))

(expect 0.5 (/ 1 2))

(expect 1 (/ 1 1))

(expect -0x80000000 (/ 0x40000000 0.5))

(expect 2 (/ -0x7fffffff 0.5))

