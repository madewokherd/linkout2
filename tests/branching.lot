(if (+ 1) 1 (abort))

(if (+ 0) (abort) 1)

; if has no effect without an elsepart
(if (abort) (abort))

(define (assert x) (or (get x) (abort)))

(define (expect x y) (assert (= (get x) (get y))))

(define (expect-ne x y) (if (= (get x) (get y)) (abort) ()))

(expect 1 1)

(expect-ne 1 0)

(expect 0 0)

(expect a a)

(expect () ())

(expect (quot a b c) (quot a b c))

(expect (or 3 (assert 0)) 3)

(expect 0 (or () 0))

(expect () (or 0 ()))

(expect () (or))

(expect 5 (or 5))

(expect 5 (or 5 2))

(and 0 (abort))

(expect () (and))

(expect 1 (and 1))

(expect () (and () 5))

(expect 0 (and 0 5))

(expect 5 (and 1 5))

(expect 0 (not 5))

(expect 0 (not a))

(expect 0 (not (quot 0 0)))

(expect 1 (not 0))

(expect 1 (not ()))

(expect 1 (not (+ 0 0)))

(expect () (not))

(expect 2 (begin
  ;FIXME: Use a global to verify execution of this line, when globals are implemented.
  2
  (+ 1 1)))

(expect 3 (begin (+ 1 2)))

(expect () (begin))

(expect () (begin . x))

(expect () (eval))

(expect (quot quot x) (eval (quot quot quot x)))

(expect (quot 1 2 3) (list (+ 1) (+ 1 1) (+ 1 1 1)))

(expect 3 (apply and (quot (+ 1) (+ 1 1) (+ 1 1 1))))

