Copyright (C) 2010, 2011 by Vincent Povirk

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


This document is intended to describe the behavior of the Lot programming language and the implementation in Linkout, for implementors.
It's not an end-user document, so things are explained in exact but potentially confusing language.
Except when it is shipped as part of a stable release, this document is in flux and may change incompatibly before the next stable release.
Except when it is shipped as part of a stable release, this document may not match the actual implementation.
Some features in this document may be absent from an actual implementation, in which case any program that uses those features should abort.
During a stable release, all features present in the implementation should be in this document.


Design goals:
 * The game engine is completely decoupled from the frontend. Or, in other words, the act of advancing from one frame to the next never calls application code, only internal code.
 * Frames, once calculated, are immutable.
 * The exact state of the game at any frame is serializable.
 * The exact state of the game at any frame is hashable, and the resulting hash is the same regardless of the machine or engine version that calculates it.
 * The state at each frame is fully determined by the state at the previous frame and a list of "external events" from the application. The most common example of an "external event" would likely be the buttons pressed by the user.
 * All games can generate a full gameplay log (a "replay") including the state at the first frame, the list of external events between each frame, and optionally states and/or hashes of other frames, for verification purposes. The game engine can, given no other information, calculate all frames in the game, and verify that the extra information matches the calculation.
 * Once the first "stable" version is released, further versions shall never break a replay. That is, the final frame will always be the same given the same initial frame and external events. To ensure this, a test suite of replays will be run before each release.
 * The "vocabulary" of objects that can exist in a frame's state is expressive enough to create a variety of action games but probably not quite expressive enough to be useful as a general-purpose programming language.
 * Once the initial frame is created and assuming all external events are understood, error conditions should be very unlikely. That is, as long as the engine understands all elements in a frame and all external events, it should be able to calculate the next frame. This means we prefer to continue with glitches when the program does something that's probably wrong, rather than abort, but we should warn. (Glitches are more fun anyway. :)
 * It should be possible to program behaviors generally. For example, it should be possible to create multiple object types with an attribute of "friendly ammunition", which would generally damage enemies but not friendly characters. Instead of each type of enemy being programmed for each type of ammunition separately (or each type of ammunition being programmed for each type of enemy), enemies should respond generally to collisions of objects of that type.
 * Situations in which multiple "solid" objects occupy the same spot, such as a character being embedded inside a wall, should be unlikely, but not impossible, in "natural" circumstances. This means that a moving object's entire path must be checked as it moves; situations where objects can pass through other objects because they are moving too fast are undesirable.
 * However, in some cases it is desirable for an action to only occur AFTER an object has moved into the appropriate position. An example might be a type of brick that is fatal to a character ("lava"). It's reasonable for a platform to exist at the same height as the lava, and a character standing partially on that platform (and partially above the lava) should not be harmed.
 * Presentation and input methods should be independent of all game logic. However, "hints" may be embedded in the program that suggest how the scene should be rendered and what input is expected.


The most important concept to the linkout engine is a frame.
All gameplay logic is embedded inside each frame.
In other words, a frame is not only the full state of the game at a specific instant but also a program that calculates the next frame.
Applications will generally create the first frame by running a program in a language to be described below.
Once the first frame is created, the application should periodically ask the engine to calculate new frames, which it then displays.
The process of creating the first frame, and the process of calculating new frames, will generate events called "hints", which the application is free to use or ignore.
Typical first frame hints will inform the application of the expected input events and of how certain sets of objects should be rendered.
Hints created from calculating frames might inform the application that the game has ended, and whether the player has won or lost.
When an application requests the calculation of new frames, it also includes a set of "external events" that modify the game state.
Typically, external events are used to inform the frame of user input, but in principle they can be used to make any kind of change to the game state.
External events are the only opportunity the application has to change the frame state once the game has begun.
This is to prevent applications from embedding gameplay logic in their own code, ensuring that each frame can be calculated strictly based on the previous frame and a known set of external events.

The meaning of "hints" and "external events" are determined by the application, and an application is free to ignore them completely, or modify the game with impunity.
A set of conventional meanings for "hints" and "external events" will be included in this document.

Each frame contains the following information:
 * A set of user-defined functions. This set is determined at the creation of the first frame and cannot be modified later.
 * A frame number. The first frame will always be number 0.
 * A random seed.
 * A general dictionary of atoms to atoms. An "atom" may be a fixed point number (with a 32-bit whole part and a 16-bit fractional part), an 8-bit string, the special value nil, or a "cons", which contains two references to atoms, named "car" and "cdr". This provides a good amount of flexibility while being easy to serialize and deserialize.
 * A list of "objects". Each object has an ascii string type that has special meaning to the engine (if it doesn't, the engine will fail), and its own dictionary of ascii strings to atoms. The type determines how (and if) the engine does collision detection for the object. Each type may store its own set of data in addition to the dictionary. The most basic type is a "box", which occupies a rectangular region of the screen.
 * Each object has a set of pixels, but these pixels may be calculated as needed. For example, a falling object will check what occupies the space below it before it moves into that space. It will do this by asking every object except itself what is in those pixels. Most objects will not yield any result (meaning those objects do not occupy that space), but those that do will yield, for each pixel they occupy, an atom and an x and y coordinate. The falling object may decide to stop if any of the pixels it encounters are "solid", where the definition of solid depends on the program.
 * A table of sprite collision masks. These masks have an arbitrary width and height, and each pixel in the sprite has a 32-bit integer identifying its pixel type.

In order to calculate the next frame based on an existing frame, the engine will do the following:
 * Create an internal copy of the frame.
 * Delete all objects with an attribute "deleted" that is not equal to ().
 * Apply each external event. External events take the form of code that is evaluated in the frame.
 * Execute the code in the global "BeforeUpdate" attribute.
 * For each object, in the reverse of the order the objects were added, execute the code in the object's OnFrame attribute. (Rationale: Some update functions will result in the creation of new objects. These new objects should not be updated until the NEXT frame, and the easiest way to ensure this is to enforce a general rule that newer objects are updated first. If no specific order were specified, different implementations could update the same frame and get a different result.)
 * Execute the code in the global "AfterUpdate" attribute.
 * Commit the new frame.

Should the engine ever be unable to calculate the next frame, it will return failure to the application.
This document will refer to the failure to calculate the frame as "aborting".
The nature of this failing result, and what information it includes, are unspecified.

While it's possible for an application to create gameplay rules by inspecting the state at each frame and deciding, based only on that state, on a set of external events to apply, this is not recommended.
Gameplay rules should be enforced by objects that exist inside the game.

Lot, the language in which games and frames will be authored, is similar to scheme.
Objects in this language are called "atoms".
An atom may be any of the following types:
 * Nil. The nil type has only one possible value, called nil, represented in the language as ().
 * Number. These are 48-bit values, where the least significant 16 bits are the fractional part. They may be represented as decimal numbers, or hex if prefixed with 0x. In both cases, the . character separates the whole part from the fractional part. If the fraction cannot be represented exactly, round down.
 * String. Strings are 8-bit. The string encoding utf8 by convention, but the language does not guarantee this. If a string starts with an alphanumeric character, or one of the ascii characters +-*/%<>=, and it does not contain whitespace, or a close parenthesis, or a digit immediately following the first character when the first character is -, it may be represented as its contents in lot. Otherwise, it should be represented as a double-quoted string with backslash acting as an escape character.
 * Cons. A cons is a reference to two other atoms of any type. The first atom referenced is called the "car" and the second is called the "cdr". A cons may be represented as (car . cdr). Like in scheme, a cons may be used to create a linked list something like (a . (b . (c . ()))). Also, like scheme, the previous expression can be written as (a b c).

Atoms are immutable, and a cons can never be recursive.

In general, an object placed at a specific pixel should have a fractional part of 32768 (or one half), so that the whole part will be the same if the object moves slightly in any direction.
In other words, the object should be placed in the center of the pixel rather than a corner.

For serialization and deserialization, the engine uses a simplified version of scheme's syntax, not yet documented.

The engine understands the following types:

"dict" type:
 * An object of the "dict" type occupies no pixels.

"box" type:
 * An object of the "box" type occupies all pixels within the rectangular area determined by its "x", "y", "width", and "height" attributes. These pixels have a type of 1.

"mask" type:
 * An object of the "mask" type occupies no pixels, but it stores a 32-bit value for every pair of 32-bit "x" and "y" co-ordinates. Each value is initially 0.

"sprite" type:
 * An object of the "sprite" type occupies a fixed set of pixels, with an offset determined by its "x" and "y" attributes.
 * The "id" value is a string key into the frame's dictionary of masks, and it determines the current sprite's size and mask. If the key is not in the frame's mask dictionary, the sprite occupies no pixels.
 * For each pixel with a non-zero value stored in the mask, the sprite occupies a pixel with a type of the value stored in the mask.

"tilemap" type:
 * An object of the "tilemap" type is essentially a conglomerate of sprites. Its upper-left corner is defined by its "x" and "y" attributes. It has tilewidth and tileheight attributes that determine the size of a single tile (the fractional part of these values is IGNORED). Theoretically, the tilemap has enough storage for every pair of 32-bit x and y values, but in practice an engine may fail if abs(x*y) is too large.
 * For each pair of 32-bit values, the tilemap stores a 32-bit integer. (A tilemap containing only 0's should in reality not occupy any memory, and a tilemap where all x and y coordinates are between, say, 0 and 3 inclusive, should probably occupy no more than 16 "slots" of memory.)
 * For each pair of integers tx and ty, where the tilemap has stored a non-zero 32-bit integer, that integer determines the collision behavior of pixels where x is in the range [x + tx*tilewidth, x + (tx+1)*tilewidth) and y is in the range [y + ty*tileheight, y + (ty+1)*tileheight). (If tileheight or tilewidth is not positive, those ranges are empty.) The collision mask is determined by the ("mask" id) attribute of the tilemap, where id is the integral id stored for those pixels. If ("mask" id) is not specified then a default collision mask that contains a 1 at every pixel will be used. The pixel type of pixels in the collision mask is (tx ty m), where m is the value from the collision mask.

In order to evaluate an atom, the Lot interpreter does the following:
 * If the atom is not a cons, return that atom as is.
 * If the car of the cons is not a string, return nil.
 * If the car of the cons is a string that the engine does not recognize, abort. (Rationale: New versions may include new commands. When old versions encounter these commands, they should report a sensible error saying that the engine is too old, rather than fail later in a strange way because some command was missing.)
 * If the car of the cons is a recognized string, and the arguments patch the pattern for that function, follow the instructions below.

Functions are listed below as a cons whose car is the name of the function.
For those functions not marked with an asterisk, the argument list (the cdr of the cons being evaluated) is first evaluated.
Evaluating an argument list is the same as a regular evaluation, except that a cons evaluates to a cons of the result of evaluating its car as an expression and its cdr as an argument list.
The function's expected argument list (the cdr of the functions listed below) is taken as a pattern against which the actual arguments are matched.
If a value cannot be found for each string in the expected argument list, the expression returns nil, and a warning may be emitted.
If the expected argument list has nil where the arguments have some other value, the extra value is ignored, and a warning may be emitted.
The behavior and result of the expression is then determined by the particular function called.

Functions marked with + are not implemented.

The lot base language supports the following functions:
 * *(if condition truepart falsepart) - If the condition is true, evaluate truepart and return its result. If the condition is false, evaluate falsepart and return its result.
 * (or . args) - If args is not a cons, return nil. Evaluate the car of the args. If the result is anything other than 0 or nil, or the cdr of the arguments is not a cons, return the result of that evaluation. Otherwise, do the same recursively for the cdr of args.
 * (and . args) - If args is not a cons, return nil. Evaluate the car of the args. If the result is anything 0 or nil, or the cdr of the arguments is not a cons, return the result of that evaluation. Otherwise, do the same recursively for the cdr of args.
 * (not x) - Return 1 if the result is 0 or nil. Otherwise, return 0.
 * *(begin . expressions) - If the arguments are not a cons, return nil. Evaluate the car of the arguments. Do the same recursively for the cdr of the arguments (i.e. evaluate the car of the cdr and repeat for the cdr of the cdr). If the cdr is not a cons, return the result of the last thing evaluated. If nothing is evaluated, return nil. (Explanatory text: This is similar to the "begin" statement in scheme; it makes it possible to execute a list of commands in sequence.)
 * (eval x) - Return the result of evaluating x.
 * *(quot . x) - Return x.
 * (list . x) - Return x.
 * (apply x y) - Equivalent to (eval (cons x y))
 * (let bindings body) - Bindings is expected to be a list of items of the form (name value). For each item of that form in bindings, evaluate name and value. Then execute body with each name/value pair added to locals.
 * (let* bindings body) - Same as let, except that later (name value) pairs are evaluated with the earlier pairs in their locals.
 * (get name) - Returns the value associated with the given name in the current locals, or nil if there is none.
 * (getlocal name) - Alias for get.
 * *(define (name . arglist) body) - Defines a custom function with the given name. This function overrides any builtin functions with the same name, with the exception that the behavior of functions defined as "equivalent to" some other expression is unchanged. When the function is called, arguments are first evaluated. If the arguments match the arglist, the body is evaluated with the argument names added to locals.
 * *(defineex (name . arglist) body) - Same as define, except that arguments are not evaluated when the custom function is called.
 * (display x) - Print x to standard out, followed by a newline. Always return nil.
 * (getglobal name) - Return the corresponding value in the globals dictionary, or nil if the name is missing.
 * (setglobal name value) - Set the given name in the globals dictionary to the given value. Always return nil.
 * (delglobal name) - Equivalent to (setglobal name ())
 * (+ . args) - Start with 0. Add (car args), (car (cdr args)), (car (cdr (cdr args))), ... until one of these values is not a number. Return the result of the last addition.
 * (* . args) - Start with 1. Multiply (car args), (car (cdr args)), (car (cdr (cdr args))), ... until one of these values is not a number. Return the result of the last multiplication.
 * (bitwise-not x) - If x is a number, return the number where every bit is set differently. Otherwise, return nil.
 * (bitwise-and . args) Start with (bitwise-not 0). Take the bitwise and of (car args), (car (cdr args)), (car (cdr (cdr args))), ... until one of these values is not a number. Return the result of the last and.
 * (bitwise-or . args) Start with 0. Take the bitwise or of (car args), (car (cdr args)), (car (cdr (cdr args))), ... until one of these values is not a number. Return the result of the last or.
 * (bitwise-xor . args) Start with 0. Take the bitwise exclusive or of (car args), (car (cdr args)), (car (cdr (cdr args))), ... until one of these values is not a number. Return the result of the last exclusive or.
 * (trunc x) - Equivalent to (bitwise-and x -1)
 * (- . x) - Take x as a list of numbers. Ignore the first item that is not a number and everything that follows. If the list contains only one number, return its additive inverse. If the list contains more than one number, subtract every number starting with the second from the first. If the list contains no numbers, return nil.
 * (/ a b) - Return the result of dividing a by b, or nil if either b or a is not a number. Round down if the result cannot be expressed exactly (rather than towards 0 as many programming languages do with integer arithmetic). Return nil if b is exactly 0.
 * +(% a b) - Equivalent to (- a (* (trunc (/ a b)) b)), or the (possibly fractional) modulo of a and b, which is between b and 0 (unlike in many programming languages). Return nil if b is exactly 0.
 * (= a b) - Return 1 if a is equal to b, 0 otherwise.
 * +(< a b) - Return 1 if a is less than b, 0 otherwise. When two items of differing type are compared, they are ordered nil < number < string < cons. Strings are compared by the numerical value at each index. If a string X is longer than string Y but all values in X equal the corresponding values in Y (X starts with Y), X < Y. A cons X is less than a cons Y if and only if (or (< (car X) (car Y)) (and (= (car X) (car Y)) (< (cdr X) (cdr Y)))).
 * +(> a b) - Return 1 if a is greater than b, 0 otherwise. This is equivalent to (not (or (= a b) (< a b))) but may be implemented differently.
 * +(<= a b) - Return 1 if a is less than or equal to b, 0 otherwise. Equivalent to (or (= a b) (< a b)).
 * +(>= a b) - Return 1 if a is greater than or equal to b, 0 otherwise. Equivalent to (not (< a b)).
 * +(<> a b) - Return 0 if a is equal to b, 1 otherwise. Equivalent to (not (= a b)).
 * +(cons a b) - Return a cons of a and b.
 * +(car x) - Returns the car of x, or nil if x is not a cons.
 * +(cdr x) - Returns the cdr of x, or nil if x is not a cons.
 * +(import filename) - Search for the given filename in a set of standard paths. If this is the first time import is called for that string, evaluate the contents of the filename. An implementation may choose to add .lot to the end of the filename, or give certain values special treatment. If the file could not be opened and parsed, abort.
 * +(sqrt x) - Returns the smallest nonnegative number y where (<= (* y y) x). If x is negative, return nil.
 * sin, cos, tan, asin, acos, atan - TBD trig functions. (The results will have to be specified exactly.)

Game scripts support the following functions:
 * *(frame . expressions) - Create an empty frame, then evaluate (begin . expressions) in that frame. If there is a current frame, do nothing (an implementaion may warn if the frame states do not match). The frame inherits all user-defined functions and masks that exist at the time it is created.
 * +(advance) - Calculate the next frame (including any external events, from the script or the implementation), then set it as the current frame. This locks both the old and new frame so that they cannot be modified.
 * (seek-to n) - Find the nth frame and set it to the current frame. When seeking backwards, frames are not discarded until some other function sets the current frame. Thus it is possible to seek forwards.
 * +(getframenum) - Return the number of the current frame. The first frame is frame 0, second is frame 1, etc. If there is no curent frame, return nil.
 * *(in-frame num body) - Evaluate num. If num is nonzero and less than or equal to the number of the latest calculated frame, evaluate body in the context of that frame and return the result. This can modify the state of the first frame if the first frame has not yet been locked.
 * +(extern . args) - Add each item in args to a list of external events to apply when (advance) is next called.
 * (hint . args) - Do nothing. The implementation may do something with the value of args or not.
 * +(draw . args) - Draw something. This is only valid in very specific contexts, and the meaning of args is implementation-defined.
 * +(load-mask maskname filename) - Read a file (typically an image) and create a mask from it. Filename may be a list, in which case the first item in the list is a filename, and the rest is an implementation-defined mechanism to help the implementation find/interpret data within the file. For example, some implementations may regard (filename x y width height) as a request to read only a specific region of the image. The supported image formats and how they map to values in the mask are implementation-defined. In general, images with palettes should map palette indexes to mask values directly. Full-color images should map to a non-premultiplied ARGB value (of the form 0xAARRGGBB) representing the colors. Name must be a string.
 * +(create-mask maskname data) - Create a mask from literal data. The data argument is a list of lists of numbers. Each list of numbers represents a row, starting at (0,0) and working down. Name must be a string.
 * +(expand-mask maskname data width) - Create a mask from compressed data. The data argument is a Base-64-encoded gzipped string of little-endian binary 32-bit values. The nth value has an x co-ordinate of n%width and a y co-ordinate of floor(n/width). Name must be a string.

Frames support the following functions:
 * +*(dict . attrs) - Create a dictionary object. This type of object has attributes but no collision detection. attrs is a list of literal (not to be evaluated) name/value pairs that make up the initial object attributes. Return the new object's id.
 * *(box . attrs) - Create a box object. attrs is a list of literal (not to be evaluated) name/value pairs that make up the initial object attributes. Return the new object's id.
 * +*(mask . attrs) - Create a mask object. attrs is a list of literal (not to be evaluated) name/value pairs that make up the initial object attributes. Return the new object's id.
 * +*(sprite . attrs) - Create a sprite object. attrs is a list of literal (not to be evaluated) name/value pairs that make up the initial object attributes. Return the new object's id.
 * +*(tilemap . attrs) - Create a sprite object. attrs is a list of literal (not to be evaluated) name/value pairs that make up the initial object attributes. Return the new object's id.
 * +(set-mask-value id x y value) - Set the value at (trunc x), (trunc y) in the given mask or tilemap to (trunc value). If the id is not a number, do nothing.
 * +(get-mask-value id x y) - Return the value at (trunc x), (trunc y) in the given mask or tilemap. The id may be a number or a string.
 * +(copy-mask-rect dst-id dst-x dst-y src-id src-x src-y width height) - Copy the values in the source mask or tilemap at src-x, src-y and extending right and down for the given width and height to the destination mask or tilemap. The destination must be a number. The source and destination regions may overlap, in which case this has the same effect as if a temporary copy of the data were made and then written to the destination.
 * +(setattr id name value) - Set the named attribute on the given object to the given value. If the object does not exist or the frame is currently immutable, do nothing.
 * +(getattr id name) - Return the value associated with the named attribute on the given object. If the given object does not exist or does not contain the named attriute, return nil.
 * +(delattr id name) - Equivalent to (setattr id name ())
 * *(check-rectangle x y width height objectidname pixeltypename body) - Evalate x, y, width, height, objectidname, and pixeltypename. Query the engine for a set of pixels in the given rectangle that are occupied by any object. Build this list before calling body. For each group of pixels, sorted by objectidname then by pixeltypename, evaluate body with the following locals set:
  * objectidname - The id of the found object.
  * pixeltypename - The pixel type of the found pixels.
  If body returns any value other than (), return it and do not call body again.
 * +*(foreach-object objectidname body) - Evaluate objectidname. For each object that exists at the time this function is called, sorted by id, evaluate body with local objectidname set to the id of that object. If body returns any value other than (), return it and do not call body again.
 * +*(check-object id x y objectidname pixeltypename body) - Same as check-rectangle, except that only the region that would be occupied by the given object, if it had the given x and y coordinates, is searched, and pixels occupied by the given object will not be returned.
 * +(getpixeltype id xofs yofs) - If the object occupies the pixel at the given x and y offsets (relative to its x and y attributes), return the pixel type at that offset. Otherwise, return nil.
 * +*(check-object-pixels id x y ownpixeltypename objectidname pixeltypename body) - Same as check-object, except that the pixel types in the given object are treated separately. ownpixeltypename will be set to the pixel type of the pixels that would be occupied by the current object if it had the given x and y value and are occupied by objectidname with pixeltypename. The results are returned in order by objectidname, pixeltypename, and ownpixeltypename.
 * +*(check-object-difference id x y xofs yofs ownpixeltypename objectidname pixeltypename body) - Same as check-object, except that the pixels that would be occupied by the given object, if that object were at (x+xofs, y+xofs), are ignored.
 * +(getframenum) - Return the number of the current frame. The first frame is frame 0, second is frame 1, etc.
 * +*(in-frame num body) - Evaluate num. If num is nonzero and less than or equal to the number of the current frame, evaluate body in the context of that frame and return the result. This can be used to inspect (but not modify) the state of previous frames. It can, however, modify the state of the current frame.
 * (hint . args) - Add args (not each argument, but the single value args) to a list of hints for the current frame. This list may be meaningful to the game script or the language implementation, or it may not.
 * (get-hints) - Return the list of hints for the current frame, in the order in which they were added.

The following are important for frames but should be library functions:
 * +(setown name value) - Equivalent to (setattr (getlocal self) name value)
 * +(getown name) - Equivalent to (getattr (getlocal self) name)
 * +(delown name) - Equivalent to (delattr (getlocal self) name)
 * +(setother name value) - Equivalent to (setattr (getlocal other) name value)
 * +(getother name) - Equivalent to (getattr (getlocal other) name)
 * +(delother name) - Equivalent to (delattr (getlocal other) name)
 * +(die) - Equivalent to (setown deleted 1)
 * +(kill) - Equivalent to (setother deleted 1)
 * +(getpixelattr id pixeltype name) - If the given object has an attribute named getpixel, evaluate the contents of that attribute with locals id set to id, pixeltype set to pixeltype, and name set to name. Otherwise, return (getattr id name).
 * +(setpixelattr id pixeltype name value) - If the given object has an attribute named setpixel, evaluate the contents of that attribute with locals id set to id, pixeltype set to pixeltype, name set to name, and value set to value. Otherwise, return (setattr id name value).
 * +(delpixelattr id pixeltype name) - Equivalent to (setpixelattr id pixeltype name ()).
 * +(getownpixel name) - Equivalent to (getpixelattr (getlocal self) (getlocal ownpixeltype) name)
 * +(setownpixel name value) - Equivalent to (setpixelattr (getlocal self) (getlocal ownpixeltype) name value)
 * +(delownpixel name) - Equivalent to (setpixelattr (getlocal self) (getlocal ownpixeltype) name ())
 * +(getotherpixel name) - Equivalent to (getpixelattr (getlocal other) (getlocal otherpixeltype) name)
 * +(setotherpixel name value) - Equivalent to (setpixelattr (getlocal other) (getlocal otherpixeltype) name value)
 * +(delotherpixel name) - Equivalent to (setpixelattr (getlocal other) (getlocal otherpixeltype) name ())
 * +(updatepos id ownbeforecollide ownaftercollide otherbeforeupdate otheraftercollide) - While the given object's mdx and mdy variables are not equal to 0 and the given object's deleted attribute is unset (equal to ()), update the current object's position, in steps up to as large as one pixel, by repeating the following steps. If mdx is greater than 0, calculate the lesser of 1 or mdx to the object's x position, which will henceforth be referred to as the "step". Subtract the step from mdx. If adding the step to x would change the whole part of x, query the engine for a set of pixels that are occupied by other objects and are in the space that the object would newly occupy or would occupy with a different type of pixel. For each group of pixels, evaluate ownbeforecollide and (getother otherbeforecollide). If none of the evaluated code has called (stop) or marked the current object for destruction, update the x coordinate and call ownaftercollide and (getother otheraftercollide) for the same group of pixels (i.e. do NOT check for collisions again, meaning that the "after" functions are called if and only if the "before" function is called and the object moves). If mdx is negative, use a negative step instead. If mdx is 0 and mdy is non-zero, go through a similar procedure with y co-ordinates instead. Repeat until both mdx and mdy are 0. The following locals will be set when calling collision functions:
   * self - The object whose attribute is being evaluated.
   * other - The object whose attribute is not being evaluated (either id or an object it will collide with).
   * moving-object - The id passed to updatepos.
   * xofs - The displacement applied to x this step.
   * yofs - The displacement applied to y this step.
   * ownpixel - The pixeltype of self involved in the collision.
   * ownpixel - The pixeltype of other involved in the collision.
 * +(iammoving) - When called in the context of code evaluated by updatepos, return 1 if the code being evaluated was passed to that command as "own" code (as opposed to "other" code). Otherwise, return 0.
 * +(stop) - When evaluated before a collision, prevent the object that would move from moving. Return nil.

